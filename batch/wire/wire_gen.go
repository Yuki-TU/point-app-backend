// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"

	"github.com/hack-31/point-app-backend/batch/controller"
	"github.com/hack-31/point-app-backend/batch/usecase"
	"github.com/hack-31/point-app-backend/config"
	"github.com/hack-31/point-app-backend/repository"
	"github.com/hack-31/point-app-backend/utils/clock"
)

// Injectors from wire.go:

func InitResetPointablePoint(ctx context.Context) (*controller.ResetSendablePoint, func(), error) {
	configConfig, err := config.New()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := repository.NewDB(ctx, configConfig)
	if err != nil {
		return nil, nil, err
	}
	clocker := clock.NewRealClocker()
	repositoryRepository := repository.NewRepository(clocker)
	resetSendablePoint := usecase.NewResetSendablePoint(db, repositoryRepository)
	controllerResetSendablePoint := controller.NewResetSendablePoint(resetSendablePoint)
	return controllerResetSendablePoint, func() {
		cleanup()
	}, nil
}
