// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/interface.go
//
// Generated by this command:
//
//	mockgen -source=./domain/interface.go -destination=./domain/_mock/mock_interface.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	repository "github.com/hack-31/point-app-backend/repository"
	"github.com/hack-31/point-app-backend/repository/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// DeleteUserByID mocks base method.
func (m *MockUserRepo) DeleteUserByID(ctx context.Context, db repository.Execer, ID entity.UserID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, db, ID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserRepoMockRecorder) DeleteUserByID(ctx, db, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserRepo)(nil).DeleteUserByID), ctx, db, ID)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepo) FindUserByEmail(ctx context.Context, db repository.Queryer, e string, columns ...string) (entity.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, db, e}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindUserByEmail", varargs...)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepoMockRecorder) FindUserByEmail(ctx, db, e any, columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, db, e}, columns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).FindUserByEmail), varargs...)
}

// GetAll mocks base method.
func (m *MockUserRepo) GetAll(ctx context.Context, db repository.Queryer, columns ...string) (entity.Users, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, db}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserRepoMockRecorder) GetAll(ctx, db any, columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, db}, columns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepo)(nil).GetAll), varargs...)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(ctx context.Context, db repository.Queryer, ID entity.UserID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, db, ID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(ctx, db, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), ctx, db, ID)
}

// RegisterUser mocks base method.
func (m *MockUserRepo) RegisterUser(ctx context.Context, db repository.Execer, u *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, db, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserRepoMockRecorder) RegisterUser(ctx, db, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserRepo)(nil).RegisterUser), ctx, db, u)
}

// UpdateAccount mocks base method.
func (m *MockUserRepo) UpdateAccount(ctx context.Context, db repository.Execer, email, familyName, familyNameKana, firstName, firstNameKana *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, db, email, familyName, familyNameKana, firstName, firstNameKana)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockUserRepoMockRecorder) UpdateAccount(ctx, db, email, familyName, familyNameKana, firstName, firstNameKana any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockUserRepo)(nil).UpdateAccount), ctx, db, email, familyName, familyNameKana, firstName, firstNameKana)
}

// UpdateEmail mocks base method.
func (m *MockUserRepo) UpdateEmail(ctx context.Context, db repository.Execer, userID entity.UserID, newEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", ctx, db, userID, newEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockUserRepoMockRecorder) UpdateEmail(ctx, db, userID, newEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockUserRepo)(nil).UpdateEmail), ctx, db, userID, newEmail)
}

// UpdatePassword mocks base method.
func (m *MockUserRepo) UpdatePassword(ctx context.Context, db repository.Execer, email, pass *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, db, email, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepoMockRecorder) UpdatePassword(ctx, db, email, pass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepo)(nil).UpdatePassword), ctx, db, email, pass)
}

// MockTransactionRepo is a mock of TransactionRepo interface.
type MockTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoMockRecorder
}

// MockTransactionRepoMockRecorder is the mock recorder for MockTransactionRepo.
type MockTransactionRepoMockRecorder struct {
	mock *MockTransactionRepo
}

// NewMockTransactionRepo creates a new mock instance.
func NewMockTransactionRepo(ctrl *gomock.Controller) *MockTransactionRepo {
	mock := &MockTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepo) EXPECT() *MockTransactionRepoMockRecorder {
	return m.recorder
}

// GetAquistionPoint mocks base method.
func (m *MockTransactionRepo) GetAquistionPoint(ctx context.Context, db repository.Queryer, userIDs []entity.UserID) (map[entity.UserID]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAquistionPoint", ctx, db, userIDs)
	ret0, _ := ret[0].(map[entity.UserID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAquistionPoint indicates an expected call of GetAquistionPoint.
func (mr *MockTransactionRepoMockRecorder) GetAquistionPoint(ctx, db, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAquistionPoint", reflect.TypeOf((*MockTransactionRepo)(nil).GetAquistionPoint), ctx, db, userIDs)
}

// MockPointRepo is a mock of PointRepo interface.
type MockPointRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPointRepoMockRecorder
}

// MockPointRepoMockRecorder is the mock recorder for MockPointRepo.
type MockPointRepoMockRecorder struct {
	mock *MockPointRepo
}

// NewMockPointRepo creates a new mock instance.
func NewMockPointRepo(ctrl *gomock.Controller) *MockPointRepo {
	mock := &MockPointRepo{ctrl: ctrl}
	mock.recorder = &MockPointRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointRepo) EXPECT() *MockPointRepoMockRecorder {
	return m.recorder
}

// RegisterPointTransaction mocks base method.
func (m *MockPointRepo) RegisterPointTransaction(ctx context.Context, db repository.Execer, fromUserID, toUserId entity.UserID, sendPoint int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPointTransaction", ctx, db, fromUserID, toUserId, sendPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPointTransaction indicates an expected call of RegisterPointTransaction.
func (mr *MockPointRepoMockRecorder) RegisterPointTransaction(ctx, db, fromUserID, toUserId, sendPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPointTransaction", reflect.TypeOf((*MockPointRepo)(nil).RegisterPointTransaction), ctx, db, fromUserID, toUserId, sendPoint)
}

// UpdateAllSendablePoint mocks base method.
func (m *MockPointRepo) UpdateAllSendablePoint(ctx context.Context, db repository.Execer, point int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSendablePoint", ctx, db, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSendablePoint indicates an expected call of UpdateAllSendablePoint.
func (mr *MockPointRepoMockRecorder) UpdateAllSendablePoint(ctx, db, point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSendablePoint", reflect.TypeOf((*MockPointRepo)(nil).UpdateAllSendablePoint), ctx, db, point)
}

// UpdateSendablePoint mocks base method.
func (m *MockPointRepo) UpdateSendablePoint(ctx context.Context, db repository.Execer, fromUserID entity.UserID, sendPoint int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendablePoint", ctx, db, fromUserID, sendPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSendablePoint indicates an expected call of UpdateSendablePoint.
func (mr *MockPointRepoMockRecorder) UpdateSendablePoint(ctx, db, fromUserID, sendPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendablePoint", reflect.TypeOf((*MockPointRepo)(nil).UpdateSendablePoint), ctx, db, fromUserID, sendPoint)
}

// MockNotificationRepo is a mock of NotificationRepo interface.
type MockNotificationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepoMockRecorder
}

// MockNotificationRepoMockRecorder is the mock recorder for MockNotificationRepo.
type MockNotificationRepoMockRecorder struct {
	mock *MockNotificationRepo
}

// NewMockNotificationRepo creates a new mock instance.
func NewMockNotificationRepo(ctrl *gomock.Controller) *MockNotificationRepo {
	mock := &MockNotificationRepo{ctrl: ctrl}
	mock.recorder = &MockNotificationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepo) EXPECT() *MockNotificationRepoMockRecorder {
	return m.recorder
}

// CheckNotification mocks base method.
func (m *MockNotificationRepo) CheckNotification(ctx context.Context, db repository.Execer, uid entity.UserID, nid entity.NotificationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNotification", ctx, db, uid, nid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNotification indicates an expected call of CheckNotification.
func (mr *MockNotificationRepoMockRecorder) CheckNotification(ctx, db, uid, nid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNotification", reflect.TypeOf((*MockNotificationRepo)(nil).CheckNotification), ctx, db, uid, nid)
}

// CreateNotification mocks base method.
func (m *MockNotificationRepo) CreateNotification(ctx context.Context, db repository.Execer, notification entity.Notification) (entity.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, db, notification)
	ret0, _ := ret[0].(entity.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationRepoMockRecorder) CreateNotification(ctx, db, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationRepo)(nil).CreateNotification), ctx, db, notification)
}

// GetByToUserByStartIdOrderByLatest mocks base method.
func (m *MockNotificationRepo) GetByToUserByStartIdOrderByLatest(ctx context.Context, db repository.Queryer, uid entity.UserID, startID entity.NotificationID, size int, columns ...string) (entity.Notifications, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, db, uid, startID, size}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByToUserByStartIdOrderByLatest", varargs...)
	ret0, _ := ret[0].(entity.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToUserByStartIdOrderByLatest indicates an expected call of GetByToUserByStartIdOrderByLatest.
func (mr *MockNotificationRepoMockRecorder) GetByToUserByStartIdOrderByLatest(ctx, db, uid, startID, size any, columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, db, uid, startID, size}, columns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToUserByStartIdOrderByLatest", reflect.TypeOf((*MockNotificationRepo)(nil).GetByToUserByStartIdOrderByLatest), varargs...)
}

// GetByToUserOrderByLatest mocks base method.
func (m *MockNotificationRepo) GetByToUserOrderByLatest(ctx context.Context, db repository.Queryer, uid entity.UserID, size int, columns ...string) (entity.Notifications, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, db, uid, size}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByToUserOrderByLatest", varargs...)
	ret0, _ := ret[0].(entity.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToUserOrderByLatest indicates an expected call of GetByToUserOrderByLatest.
func (mr *MockNotificationRepoMockRecorder) GetByToUserOrderByLatest(ctx, db, uid, size any, columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, db, uid, size}, columns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToUserOrderByLatest", reflect.TypeOf((*MockNotificationRepo)(nil).GetByToUserOrderByLatest), varargs...)
}

// GetNotificationByID mocks base method.
func (m *MockNotificationRepo) GetNotificationByID(ctx context.Context, db repository.Queryer, uid entity.UserID, nid entity.NotificationID) (entity.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", ctx, db, uid, nid)
	ret0, _ := ret[0].(entity.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockNotificationRepoMockRecorder) GetNotificationByID(ctx, db, uid, nid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockNotificationRepo)(nil).GetNotificationByID), ctx, db, uid, nid)
}

// GetUncheckedNotificationCount mocks base method.
func (m *MockNotificationRepo) GetUncheckedNotificationCount(ctx context.Context, db repository.Queryer, uid entity.UserID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncheckedNotificationCount", ctx, db, uid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncheckedNotificationCount indicates an expected call of GetUncheckedNotificationCount.
func (mr *MockNotificationRepoMockRecorder) GetUncheckedNotificationCount(ctx, db, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncheckedNotificationCount", reflect.TypeOf((*MockNotificationRepo)(nil).GetUncheckedNotificationCount), ctx, db, uid)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenGenerator) GenerateToken(ctx context.Context, u entity.User) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, u)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateToken(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateToken), ctx, u)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), ctx, key)
}

// Expire mocks base method.
func (m *MockCache) Expire(ctx context.Context, key string, minitue time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, minitue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockCacheMockRecorder) Expire(ctx, key, minitue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockCache)(nil).Expire), ctx, key, minitue)
}

// Load mocks base method.
func (m *MockCache) Load(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCacheMockRecorder) Load(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCache)(nil).Load), ctx, key)
}

// Publish mocks base method.
func (m *MockCache) Publish(ctx context.Context, channel, palyload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, palyload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockCacheMockRecorder) Publish(ctx, channel, palyload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockCache)(nil).Publish), ctx, channel, palyload)
}

// Save mocks base method.
func (m *MockCache) Save(ctx context.Context, key, value string, minute time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, key, value, minute)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCacheMockRecorder) Save(ctx, key, value, minute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCache)(nil).Save), ctx, key, value, minute)
}

// Subscribe mocks base method.
func (m *MockCache) Subscribe(ctx *gin.Context, channel string) (<-chan string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, channel)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCacheMockRecorder) Subscribe(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCache)(nil).Subscribe), ctx, channel)
}
