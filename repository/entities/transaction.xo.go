package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Transaction represents a row from 'point_app.transactions'.
type Transaction struct {
	ID               uint64    `json:"id" db:"id"`                               // 取引の識別子
	SendingUserID    uint64    `json:"sending_user_id" db:"sending_user_id"`     // 送信ユーザのID
	ReceivingUserID  uint64    `json:"receiving_user_id" db:"receiving_user_id"` // 受信ユーザのID
	TransactionPoint int       `json:"transaction_point" db:"transaction_point"` // 取引ポイント
	TransactionAt    time.Time `json:"transaction_at" db:"transaction_at"`       // 取引日時
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Transaction] exists in the database.
func (t *Transaction) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Transaction] has been marked for deletion
// from the database.
func (t *Transaction) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Transaction] to the database.
func (t *Transaction) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO point_app.transactions (` +
		`sending_user_id, receiving_user_id, transaction_point, transaction_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, t.SendingUserID, t.ReceivingUserID, t.TransactionPoint, t.TransactionAt)
	res, err := db.ExecContext(ctx, sqlstr, t.SendingUserID, t.ReceivingUserID, t.TransactionPoint, t.TransactionAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	t.ID = uint64(id)
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Transaction] in the database.
func (t *Transaction) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE point_app.transactions SET ` +
		`sending_user_id = ?, receiving_user_id = ?, transaction_point = ?, transaction_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, t.SendingUserID, t.ReceivingUserID, t.TransactionPoint, t.TransactionAt, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.SendingUserID, t.ReceivingUserID, t.TransactionPoint, t.TransactionAt, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Transaction] to the database.
func (t *Transaction) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Transaction].
func (t *Transaction) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO point_app.transactions (` +
		`id, sending_user_id, receiving_user_id, transaction_point, transaction_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`sending_user_id = VALUES(sending_user_id), receiving_user_id = VALUES(receiving_user_id), transaction_point = VALUES(transaction_point), transaction_at = VALUES(transaction_at)`
	// run
	logf(sqlstr, t.ID, t.SendingUserID, t.ReceivingUserID, t.TransactionPoint, t.TransactionAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.SendingUserID, t.ReceivingUserID, t.TransactionPoint, t.TransactionAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Transaction] from the database.
func (t *Transaction) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM point_app.transactions ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TransactionByID retrieves a row from 'point_app.transactions' as a [Transaction].
//
// Generated from index 'transactions_id_pkey'.
func TransactionByID(ctx context.Context, db DB, id uint64) (*Transaction, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, sending_user_id, receiving_user_id, transaction_point, transaction_at ` +
		`FROM point_app.transactions ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	t := Transaction{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.SendingUserID, &t.ReceivingUserID, &t.TransactionPoint, &t.TransactionAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}
