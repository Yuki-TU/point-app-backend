package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// User represents a row from 'point_app.users'.
type User struct {
	ID             uint64    `json:"id" db:"id"`                             // ユーザーの識別子
	FamilyName     string    `json:"family_name" db:"family_name"`           // 苗字
	FamilyNameKana string    `json:"family_name_kana" db:"family_name_kana"` // 苗字カナ
	FirstName      string    `json:"first_name" db:"first_name"`             // 名前
	FirstNameKana  string    `json:"first_name_kana" db:"first_name_kana"`   // 名前カナ
	Email          string    `json:"email" db:"email"`                       // メールアドレス
	Password       string    `json:"password" db:"password"`                 // パスワードハッシュ
	SendingPoint   int       `json:"sending_point" db:"sending_point"`       // 送信可能ポイント
	CreatedAt      time.Time `json:"created_at" db:"created_at"`             // レコード作成日時
	UpdateAt       time.Time `json:"update_at" db:"update_at"`               // レコード修正日時
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [User] exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the [User] has been marked for deletion
// from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the [User] to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO point_app.users (` +
		`family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, u.FamilyName, u.FamilyNameKana, u.FirstName, u.FirstNameKana, u.Email, u.Password, u.SendingPoint, u.CreatedAt, u.UpdateAt)
	res, err := db.ExecContext(ctx, sqlstr, u.FamilyName, u.FamilyNameKana, u.FirstName, u.FirstNameKana, u.Email, u.Password, u.SendingPoint, u.CreatedAt, u.UpdateAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	u.ID = uint64(id)
	// set exists
	u._exists = true
	return nil
}

// Update updates a [User] in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE point_app.users SET ` +
		`family_name = ?, family_name_kana = ?, first_name = ?, first_name_kana = ?, email = ?, password = ?, sending_point = ?, created_at = ?, update_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, u.FamilyName, u.FamilyNameKana, u.FirstName, u.FirstNameKana, u.Email, u.Password, u.SendingPoint, u.CreatedAt, u.UpdateAt, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.FamilyName, u.FamilyNameKana, u.FirstName, u.FirstNameKana, u.Email, u.Password, u.SendingPoint, u.CreatedAt, u.UpdateAt, u.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [User] to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for [User].
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO point_app.users (` +
		`id, family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`family_name = VALUES(family_name), family_name_kana = VALUES(family_name_kana), first_name = VALUES(first_name), first_name_kana = VALUES(first_name_kana), email = VALUES(email), password = VALUES(password), sending_point = VALUES(sending_point), created_at = VALUES(created_at), update_at = VALUES(update_at)`
	// run
	logf(sqlstr, u.ID, u.FamilyName, u.FamilyNameKana, u.FirstName, u.FirstNameKana, u.Email, u.Password, u.SendingPoint, u.CreatedAt, u.UpdateAt)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID, u.FamilyName, u.FamilyNameKana, u.FirstName, u.FirstNameKana, u.Email, u.Password, u.SendingPoint, u.CreatedAt, u.UpdateAt); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the [User] from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM point_app.users ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByEmail retrieves a row from 'point_app.users' as a [User].
//
// Generated from index 'uix_email'.
func UserByEmail(ctx context.Context, db DB, email string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at ` +
		`FROM point_app.users ` +
		`WHERE email = ?`
	// run
	logf(sqlstr, email)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&u.ID, &u.FamilyName, &u.FamilyNameKana, &u.FirstName, &u.FirstNameKana, &u.Email, &u.Password, &u.SendingPoint, &u.CreatedAt, &u.UpdateAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UserByID retrieves a row from 'point_app.users' as a [User].
//
// Generated from index 'users_id_pkey'.
func UserByID(ctx context.Context, db DB, id uint64) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at ` +
		`FROM point_app.users ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&u.ID, &u.FamilyName, &u.FamilyNameKana, &u.FirstName, &u.FirstNameKana, &u.Email, &u.Password, &u.SendingPoint, &u.CreatedAt, &u.UpdateAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
