package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// DeleteUser represents a row from 'point_app.delete_users'.
type DeleteUser struct {
	ID                   uint64    `json:"id" db:"id"`                                         // ユーザーの識別子
	NotificationLatestID uint64    `json:"notification_latest_id" db:"notification_latest_id"` // 最新のお知らせID
	FamilyName           string    `json:"family_name" db:"family_name"`                       // 苗字
	FamilyNameKana       string    `json:"family_name_kana" db:"family_name_kana"`             // 苗字カナ
	FirstName            string    `json:"first_name" db:"first_name"`                         // 名前
	FirstNameKana        string    `json:"first_name_kana" db:"first_name_kana"`               // 名前カナ
	Email                string    `json:"email" db:"email"`                                   // メールアドレス
	Password             string    `json:"password" db:"password"`                             // パスワードハッシュ
	SendingPoint         int       `json:"sending_point" db:"sending_point"`                   // 送信可能ポイント
	CreatedAt            time.Time `json:"created_at" db:"created_at"`                         // レコード作成日時
	UpdateAt             time.Time `json:"update_at" db:"update_at"`                           // レコード修正日時
	DeleteAt             time.Time `json:"delete_at" db:"delete_at"`                           // レコード削除日時
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DeleteUser] exists in the database.
func (du *DeleteUser) Exists() bool {
	return du._exists
}

// Deleted returns true when the [DeleteUser] has been marked for deletion
// from the database.
func (du *DeleteUser) Deleted() bool {
	return du._deleted
}

// Insert inserts the [DeleteUser] to the database.
func (du *DeleteUser) Insert(ctx context.Context, db DB) error {
	switch {
	case du._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case du._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO point_app.delete_users (` +
		`notification_latest_id, family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at, delete_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, du.NotificationLatestID, du.FamilyName, du.FamilyNameKana, du.FirstName, du.FirstNameKana, du.Email, du.Password, du.SendingPoint, du.CreatedAt, du.UpdateAt, du.DeleteAt)
	res, err := db.ExecContext(ctx, sqlstr, du.NotificationLatestID, du.FamilyName, du.FamilyNameKana, du.FirstName, du.FirstNameKana, du.Email, du.Password, du.SendingPoint, du.CreatedAt, du.UpdateAt, du.DeleteAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	du.ID = uint64(id)
	// set exists
	du._exists = true
	return nil
}

// Update updates a [DeleteUser] in the database.
func (du *DeleteUser) Update(ctx context.Context, db DB) error {
	switch {
	case !du._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case du._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE point_app.delete_users SET ` +
		`notification_latest_id = ?, family_name = ?, family_name_kana = ?, first_name = ?, first_name_kana = ?, email = ?, password = ?, sending_point = ?, created_at = ?, update_at = ?, delete_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, du.NotificationLatestID, du.FamilyName, du.FamilyNameKana, du.FirstName, du.FirstNameKana, du.Email, du.Password, du.SendingPoint, du.CreatedAt, du.UpdateAt, du.DeleteAt, du.ID)
	if _, err := db.ExecContext(ctx, sqlstr, du.NotificationLatestID, du.FamilyName, du.FamilyNameKana, du.FirstName, du.FirstNameKana, du.Email, du.Password, du.SendingPoint, du.CreatedAt, du.UpdateAt, du.DeleteAt, du.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DeleteUser] to the database.
func (du *DeleteUser) Save(ctx context.Context, db DB) error {
	if du.Exists() {
		return du.Update(ctx, db)
	}
	return du.Insert(ctx, db)
}

// Upsert performs an upsert for [DeleteUser].
func (du *DeleteUser) Upsert(ctx context.Context, db DB) error {
	switch {
	case du._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO point_app.delete_users (` +
		`id, notification_latest_id, family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at, delete_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`notification_latest_id = VALUES(notification_latest_id), family_name = VALUES(family_name), family_name_kana = VALUES(family_name_kana), first_name = VALUES(first_name), first_name_kana = VALUES(first_name_kana), email = VALUES(email), password = VALUES(password), sending_point = VALUES(sending_point), created_at = VALUES(created_at), update_at = VALUES(update_at), delete_at = VALUES(delete_at)`
	// run
	logf(sqlstr, du.ID, du.NotificationLatestID, du.FamilyName, du.FamilyNameKana, du.FirstName, du.FirstNameKana, du.Email, du.Password, du.SendingPoint, du.CreatedAt, du.UpdateAt, du.DeleteAt)
	if _, err := db.ExecContext(ctx, sqlstr, du.ID, du.NotificationLatestID, du.FamilyName, du.FamilyNameKana, du.FirstName, du.FirstNameKana, du.Email, du.Password, du.SendingPoint, du.CreatedAt, du.UpdateAt, du.DeleteAt); err != nil {
		return logerror(err)
	}
	// set exists
	du._exists = true
	return nil
}

// Delete deletes the [DeleteUser] from the database.
func (du *DeleteUser) Delete(ctx context.Context, db DB) error {
	switch {
	case !du._exists: // doesn't exist
		return nil
	case du._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM point_app.delete_users ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, du.ID)
	if _, err := db.ExecContext(ctx, sqlstr, du.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	du._deleted = true
	return nil
}

// DeleteUserByID retrieves a row from 'point_app.delete_users' as a [DeleteUser].
//
// Generated from index 'delete_users_id_pkey'.
func DeleteUserByID(ctx context.Context, db DB, id uint64) (*DeleteUser, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, notification_latest_id, family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at, delete_at ` +
		`FROM point_app.delete_users ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	du := DeleteUser{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&du.ID, &du.NotificationLatestID, &du.FamilyName, &du.FamilyNameKana, &du.FirstName, &du.FirstNameKana, &du.Email, &du.Password, &du.SendingPoint, &du.CreatedAt, &du.UpdateAt, &du.DeleteAt); err != nil {
		return nil, logerror(err)
	}
	return &du, nil
}

// DeleteUserByEmail retrieves a row from 'point_app.delete_users' as a [DeleteUser].
//
// Generated from index 'uix_email'.
func DeleteUserByEmail(ctx context.Context, db DB, email string) (*DeleteUser, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, notification_latest_id, family_name, family_name_kana, first_name, first_name_kana, email, password, sending_point, created_at, update_at, delete_at ` +
		`FROM point_app.delete_users ` +
		`WHERE email = ?`
	// run
	logf(sqlstr, email)
	du := DeleteUser{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&du.ID, &du.NotificationLatestID, &du.FamilyName, &du.FamilyNameKana, &du.FirstName, &du.FirstNameKana, &du.Email, &du.Password, &du.SendingPoint, &du.CreatedAt, &du.UpdateAt, &du.DeleteAt); err != nil {
		return nil, logerror(err)
	}
	return &du, nil
}
