package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// NotificationType represents a row from 'point_app.notification_types'.
type NotificationType struct {
	ID    uint64 `json:"id" db:"id"`       // お知らせ種別ID
	Title string `json:"title" db:"title"` // タイトル
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [NotificationType] exists in the database.
func (nt *NotificationType) Exists() bool {
	return nt._exists
}

// Deleted returns true when the [NotificationType] has been marked for deletion
// from the database.
func (nt *NotificationType) Deleted() bool {
	return nt._deleted
}

// Insert inserts the [NotificationType] to the database.
func (nt *NotificationType) Insert(ctx context.Context, db DB) error {
	switch {
	case nt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case nt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO point_app.notification_types (` +
		`title` +
		`) VALUES (` +
		`?` +
		`)`
	// run
	logf(sqlstr, nt.Title)
	res, err := db.ExecContext(ctx, sqlstr, nt.Title)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	nt.ID = uint64(id)
	// set exists
	nt._exists = true
	return nil
}

// Update updates a [NotificationType] in the database.
func (nt *NotificationType) Update(ctx context.Context, db DB) error {
	switch {
	case !nt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case nt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE point_app.notification_types SET ` +
		`title = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, nt.Title, nt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, nt.Title, nt.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [NotificationType] to the database.
func (nt *NotificationType) Save(ctx context.Context, db DB) error {
	if nt.Exists() {
		return nt.Update(ctx, db)
	}
	return nt.Insert(ctx, db)
}

// Upsert performs an upsert for [NotificationType].
func (nt *NotificationType) Upsert(ctx context.Context, db DB) error {
	switch {
	case nt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO point_app.notification_types (` +
		`id, title` +
		`) VALUES (` +
		`?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`title = VALUES(title)`
	// run
	logf(sqlstr, nt.ID, nt.Title)
	if _, err := db.ExecContext(ctx, sqlstr, nt.ID, nt.Title); err != nil {
		return logerror(err)
	}
	// set exists
	nt._exists = true
	return nil
}

// Delete deletes the [NotificationType] from the database.
func (nt *NotificationType) Delete(ctx context.Context, db DB) error {
	switch {
	case !nt._exists: // doesn't exist
		return nil
	case nt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM point_app.notification_types ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, nt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, nt.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	nt._deleted = true
	return nil
}

// NotificationTypeByID retrieves a row from 'point_app.notification_types' as a [NotificationType].
//
// Generated from index 'notification_types_id_pkey'.
func NotificationTypeByID(ctx context.Context, db DB, id uint64) (*NotificationType, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, title ` +
		`FROM point_app.notification_types ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	nt := NotificationType{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&nt.ID, &nt.Title); err != nil {
		return nil, logerror(err)
	}
	return &nt, nil
}
