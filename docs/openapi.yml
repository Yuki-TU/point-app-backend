openapi: 3.0.0
info:
  version: 0.0.0
  title: point-app-backend RESTful API
  description: >-
    ハッカソン2022で作成するポイントアプリのバックエンドAPI
servers:
  - url: 'http://{host}:8081/api/v1'
    description: go service api server endpoint application
    variables:
      host:
        default: localhost
        enum:
          - localhost
paths:
  /register:
    post:
      tags:
        - サンプル
      summary: ユーザ登録
      description: |
        クライアントが入力する情報をもとにユーザ情報を登録する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 山田太郎
                email:
                  type: string
                  format: email
                  example: yamada@hoge.hoge
                password:
                  type: string
                  format: password
                  example: qwerty123456789
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: ユーザ情報登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "ユーザ登録に成功しました。"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                required:
                  - statusCode
                  - method
                  - message
                  - data
        '409':
          description: |
            登録済みのメールアドレス
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "登録済みのメールアドレスです。"
                  data: 
                    type: object
                    example: null
        '500':
          $ref: '#/components/responses/500Error'

  /temporary_users:
    post:
      tags:
        - ユーザ登録
      summary: サインアップ(ユーザ仮登録)
      description: |
        - ユーザが入力した情報をもとにユーザ情報を仮登録する
        - 指定したメールアドレスに確認コードを送る
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                familyName:
                  type: string
                  example: 山田
                familyNameKana:
                  type: string
                  example: ヤマダ
                firstName:
                  type: string
                  example: 太郎
                firstNameKana:
                  type: string
                  example: タロウ
                email:
                  type: string
                  format: email
                  example: yamada@sample.com
                password:
                  type: string
                  format: password
                  example: qwerty123456789
              required:
                - firstName
                - firstNameKana
                - familyName
                - familyNameKana
                - email
                - password
      responses:
        '201':
          description: ユーザ情報登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 201
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "本登録メールを送信しました。"
                  data:
                    type: object
                    properties:
                      temporaryUserId:
                        type: string
                        example: 8e8d0f82-89a1-4cc6-ba25-13c864ad09db
                required:
                  - statusCode
                  - method
                  - message
        '400':
           $ref: '#/components/responses/400Error'
        '409':
          description: |
            登録済みのメールアドレス
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "登録済みのメールアドレスは登録できません。"
                  data: 
                    type: object
                    example: null
        '500':
          $ref: '#/components/responses/500Error'

  /users:
    post:
      tags:
        - ユーザ登録
      summary: サインアップ(ユーザ本登録)
      description: |
        - ユーザーの本登録を行う
        - 確認コードconfirmCodeは、仮登録で指定したメールアドレスに送信される
        - 確認コードには有効期限がある
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                temporaryUserId:
                  type: string
                  example: 8e8d0f82-89a1-4cc6-ba25-13c864ad09db
                confirmCode:
                  type: string
                  example: 7821
      responses:
        '201':
          description: 本登録完了
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 201
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "本登録が完了しました。"
                  data: 
                    type: object
                    properties:
                      userId:
                        type: integer
                        example: 24
                      sessionKey:
                        type: string
                        example: hfdsali28fdad89af.d8a9ckafjdlsa9fd8dkl88fd9a9f.fdasfdsadsakfdlkajfd8a9
        '400':
           $ref: '#/components/responses/400Error'
        '401':
          description: |
            確認コードまたはセッションキーが無効
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 401
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "確認コードまたは、セッションキーが無効です。"
                  data: 
                    type: object
                    example: null

        '409':
          description: |
            登録済みのメールアドレス
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  method:
                    type: string
                    example: "POST"
                  message:
                    type: string
                    example: "登録済みのメールアドレスは登録できません。"
                  data: 
                    type: object
                    example: null

        '500':
          $ref: '#/components/responses/500Error'    

    get:
      security:
        - bearerAuth: []
      tags:
        - ユーザー情報
      summary: ユーザ一覧情報取得
      description: |
        - ユーザ情報一覧を取得する
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  method:
                    type: string
                    example: GET
                  message:
                    type: string
                    example: "取得成功しました。"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            familyName:
                              type: string
                            familyNameKana:
                              type: string
                            firstName:
                              type: string
                            firstNameKana:
                              type: string
                            email:
                              type: string
                              format: email
                            acquisitionPoint:
                              type: number
                        example:
                          - familytName: 山田
                            familyNameKana: ヤマダ
                            firstName: 太郎
                            firstNameKana: タロウ
                            email: yamada@sample.com
                            acquisitionPoint: 200
                          - familytName: 本郷
                            familyNameKana: ホンゴウ
                            firstName: 奏
                            firstNameKana: カナタ
                            email: hongo@sample.com
                            acquisitionPoint: 1000000
                          - familytName: 本田
                            familyNameKana: ホンダ
                            firstName: 美優
                            firstNameKana: ミユ
                            email: honda@sample.com
                            acquisitionPoint: 11100

        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500Error'    

  /sessions:
    post:
      tags:
        - 認証
      summary: サインイン
      description: |
        - メールアドレスとパスワードで認証する
        - セッションキー(トークン)を生成し、返却
        - 保護されたエンドポイントのリクエストヘッダーにセッションキーを付与する必要がある
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: yamada@hoge.hoge
                password:
                  type: string
                  format: password
                  example: qwerty123456789
              required:
                - email
                - password
      responses:
        '200':
          description: 認証が成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  method:
                    type: string
                    example: POST
                  message:
                    type: string
                    example: "サインイン成功しました。"
                  data:
                    type: object
                    properties:
                      sessionKey:
                        type: string
                        example: hfdsali28fdad89af.d8a9ckafjdlsa9fd8dkl88fd9a9f.fdasfdsadsakfdlkajfd8a9
        '401':
          description: メールアドレス、または、パスワードが異なる
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 401
                  method:
                    type: string
                    example: POST
                  message:
                    type: string
                    example: "メールアドレスまたはパスワードが異なります。"
                  data: 
                    type: object
                    example: null
        '500':
          $ref: '#/components/responses/500Error'    

  /sessions/{sessionKey}:
    delete:
      tags:
        - 認証
      summary: サインアウト
      description: |
        - セッションキーを削除し、サインアウト処理を行う
      parameters:
        - in: path
          name: sessionKey
          schema: 
            type: string
          description: |
            - セッションキーを削除し、ログアウト処理とする
          required: true
      responses:
        '200':
          description: サインアウトが成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  method:
                    type: string
                    example: DELETE
                  message:
                    type: string
                    example: "サインアウトが成功しました。"
                  data:
                    type: object
                    example: null
        '404':
          description: 無効なセッションキー
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 404
                  method:
                    type: string
                    example: DELETE
                  message:
                    type: string
                    example: "セッションキーが無効です。"
                  data: 
                    type: object
                    example: null
        '500':
          $ref: '#/components/responses/500Error'    



components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT 

  responses:
    400Error:
      description: |
        パラメーターエラー
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                example: "400"
              method:
                type: string
                example: "POST"
              message: 
                type: string
                example: "name: cannot be blank."
              data:
                type: object
                example: null

    401UnauthorizedError:
      description: |
        認証失敗
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                example: "401"
              method:
                type: string
                example: "GET"
              message: 
                type: string
                example: "認証が失敗しました。再ログインしてください。"
              data:
                type: object
                example: null

    500Error:
      description: |
        サーバー上のエラー
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                example: "500"
              method:
                type: string
                example: "POST"
              message: 
                type: string
                example: "サーバー側で何らかのエラーが発生しました。"
              data:
                type: object
                example: null
