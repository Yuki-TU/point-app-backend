openapi: 3.0.0
info:
  version: 1.0.0
  title: point-app-backend RESTful API
  description: >-
    ハッカソン2022で作成するポイントアプリのバックエンドAPI
servers:
  - url: 'http://{host}:8081/api/v1'
    description: go service api server endpoint application
    variables:
      host:
        default: localhost
        enum:
          - localhost
paths:
  /temporary_users:
    post:
      tags:
        - ユーザ登録・認証
      summary: サインアップ(ユーザ仮登録)
      description: |
        - ユーザが入力した情報をもとにユーザ情報を仮登録する
        - 指定したメールアドレスに確認コードを送る
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                familyName:
                  type: string
                  example: 山田
                familyNameKana:
                  type: string
                  example: ヤマダ
                firstName:
                  type: string
                  example: 太郎
                firstNameKana:
                  type: string
                  example: タロウ
                email:
                  type: string
                  format: email
                  example: yamada@sample.com
                password:
                  type: string
                  format: password
                  example: qwerty123456789
              required:
                - firstName
                - firstNameKana
                - familyName
                - familyNameKana
                - email
                - password
      responses:
        '201':
          description: ユーザ情報登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 201
                  message:
                    type: string
                    example: "本登録メールを送信しました。"
                  data:
                    type: object
                    properties:
                      temporaryUserId:
                        type: string
                        example: 8e8d0f82-89a1-4cc6-ba25-13c864ad09db
                required:
                  - statusCode
                  - method
                  - message
        '400':
           $ref: '#/components/responses/400Error'
        '409':
          description: |
            登録済みのメールアドレス
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  title: 
                    type: string
                    example: "ユーザ仮登録エラー"
                  message:
                    type: string
                    example: "登録済みのメールアドレスは登録できません。"
        '500':
          $ref: '#/components/responses/500Error'

  /users:
    post:
      tags:
        - ユーザ登録・認証
      summary: サインアップ(ユーザ本登録)
      description: |
        - ユーザーの本登録を行う
        - 確認コードconfirmCodeは、仮登録で指定したメールアドレスに送信される
        - 確認コードには有効期限がある
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                temporaryUserId:
                  type: string
                  example: 8e8d0f82-89a1-4cc6-ba25-13c864ad09db
                confirmCode:
                  type: string
                  example: 7821
      responses:
        '201':
          description: 本登録完了
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 201
                  message:
                    type: string
                    example: "本登録が完了しました。"
                  data: 
                    type: object
                    properties:
                      userId:
                        type: integer
                        example: 24
                      accessToken:
                        type: string
                        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzEzMDcyNjYsImlhdCI6MTY3MTMwNTQ2NiwiaXNzIjoiZ2l0aHViLmNvbS9oYWNrLTMxL3BvaW50LWFwcC1iYWNrZW5kIiwianRpIjoiZGJkNzU3MzItNzFmZC00ZDQ4LWIyNmYtMTdlNTkwMjRlNDYxIiwicm9sZSI6InlhbWFkYUBzZmRhYXNtcGxlLmNvbSIsInN1YiI6ImFjY2Vzc190b2tlbiIsInVzZXJfbmFtZSI6MzQ0fQ.cE8BtV82WELa4mE7I0V92zriMTCPS9ztzaL-SZW0zJc3oLCameUI0OPa3pCjv-_YGUF3PyDmh5NuP0cKLZE2tT68fyvskhs_RgaaY-N6_tHFHzY9d8wiMyBO4fuGyp1tFX9BwUSvzLTDynhXDMN2DeaFGBapXoFgiI0dZE215dsPgtXCSOaz536hJShWOKTPgBEJ7uVRMATKJ--g0SUomj29P4bmHPYUIQyAoZSXZH-m3oOR-Et9F_MjuTy2BwZE6SNIO6oeAbdfzIW7f1qxSjM_5T64n_X_1O_gdRP0_ebcp4s7w2y4MX5c79gYKnAolwEMY5pVEqYFf-Eeig_G4Be6Tp_xm9zHcMi_aarQ7vbPebT6KXLZn5y5a0MraG0TnnOluZo-_Os5CEwFAfaOr2Y67NIZRcnnDvX9gLfAvaapyvBfcQ8DOXjimH-MOxjGGM0RYRZ9U9QLn3NgTZkrgmvbUlJJcRuCX48PaCtRiU_GdmOOTA3LA141_sk8Ce0YUiUqmWASD0DmuPJIfkGgHbqugXPgchHMl68U6oli22BuRTal3WHg4JQPgqKTeqt9bruVTecJ5XAIzdcvLEY_Nz62jc1VX4aY8Ty6dB1zlQbbriuN78DId0qwv5aqeHzv5StKChZOayRSchu_lSZVfq7s8N4DHJxg0SgvD0qoDd8
        '400':
           $ref: '#/components/responses/400Error'
        '401':
          description: |
            確認コードまたはトークンが無効
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 401
                  title: 
                    type: string
                    example: "ユーザ本登録エラー"
                  message:
                    type: string
                    example: "確認コードまたは、トークンが無効です。"

        '409':
          description: |
            登録済みのメールアドレス
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  title: 
                    type: string
                    example: "ユーザ本登録エラー"
                  message:
                    type: string
                    example: "登録済みのメールアドレスは登録できません。"

        '500':
          $ref: '#/components/responses/500Error'    

    get:
      security:
        - bearerAuth: []
      tags:
        - ユーザー情報
      summary: ユーザ一覧情報取得
      description: |
        - ユーザ情報一覧を取得する
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "取得成功しました。"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            familyName:
                              type: string
                            familyNameKana:
                              type: string
                            firstName:
                              type: string
                            firstNameKana:
                              type: string
                            email:
                              type: string
                              format: email
                            acquisitionPoint:
                              type: number
                        example:
                          - familyName: 山田
                            familyNameKana: ヤマダ
                            firstName: 太郎
                            firstNameKana: タロウ
                            email: yamada@sample.com
                            acquisitionPoint: 200
                          - familyName: 本郷
                            familyNameKana: ホンゴウ
                            firstName: 奏
                            firstNameKana: カナタ
                            email: hongo@sample.com
                            acquisitionPoint: 1000000
                          - familyName: 本田
                            familyNameKana: ホンダ
                            firstName: 美優
                            firstNameKana: ミユ
                            email: honda@sample.com
                            acquisitionPoint: 11100

        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500Error'    
  
  /account:
    get:
      security:
        - bearerAuth: []
      tags:
        - アカウント
      summary: アカウント情報取得
      description: |
        - セッションキーのユーザ情報を返却する
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "アカウント情報の取得に成功しました。"
                  data:
                    type: object
                    properties:
                      familyName:
                        type: string
                      familyNameKana:
                        type: string
                      firstName:
                        type: string
                      firstNameKana:
                        type: string
                      email:
                        type: string
                      acquisitionPoint:
                        type: integer
                        description: 保有ポイント
                      sendablePoint:
                        type: integer
                        description: 送信可能ポイント
                    example:
                      familyName: 山田
                      familyNameKana: ヤマダ
                      firstName: 太郎
                      firstNameKana: タロウ
                      email: yamada@sample.com
                      acquisitionPoint: 30000
                      sendablePoint: 1000           
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500Error'    

    put:
      tags:
        - アカウント
      summary: アカウント情報更新
      description: |
        - セッションキーのユーザ情報を更新する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                familyName:
                  type: string
                  example: 葛飾
                familyNameKana:
                  type: string
                  example: カツシカ
                firstName:
                  type: string
                  example: 北斎
                firstNameKana:
                  type: string
                  example: ホクサイ
              required:
                - firstName
                - firstNameKana
                - familyName
                - familyNameKana
                - email
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "アカウント情報の更新に成功しました。"           
                  data:
                    type: object
                    example: null
        '400':
           $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401UnauthorizedError'

        '500':
          $ref: '#/components/responses/500Error'

  /point_trancsactions:
    post:
      security:
        - bearerAuth: []
      tags:
        - ポイント
      summary: ポイントの取引
      description: |
        - 指定したユーザーにポイントを送付する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                toUserId:
                  type: string
                  example: 12345
                sendPoint:
                  type: integer
                  example: 100
              required:
                - toUserId
                - sendPoint
      responses:
        '201':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "ポイントの送信に成功しました。"
                  data:
                    type: object
                    example: null

        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500Error'

  /random_password:
    patch:
      security:
        - bearerAuth: []
      tags:
        - アカウント
      summary: パスワードリセット
      description: |
        - リクエストのメールアドレスに対し、ランダムにパスワードを生成し、更新する
          - ただし、リクエストされたメールアドレスがデータベースに存在しなければ、更新しない
        - リクエストのメールアドレスに保存したパスワードを送信する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: yamada@sample.hoge
              required:
                - email
      responses:
        '200':
          description: パスワード際発行メール送信
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "パスワード再発行メールを送信しました。"
                  data:
                    type: object
                    example: null
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '404':
          description: |
            メールアドレスが存在しない
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  title: 
                    type: string
                    example: "パスワードリセットエラー"
                  message:
                    type: string
                    example: "メールアドレスが存在しません。"
        '500':
          $ref: '#/components/responses/500Error'

  /temporary_email_and_password:
    patch:
      security:
        - bearerAuth: []
      tags:
        - アカウント
      summary: メール・パスワード仮変更
      description: |
        - メールまたはパスワードの仮登録をする
        - リクエストされたメールアドレスに確認コードを送信する
        - メールアドレスが指定されていたら指定されてメールアドレスに対して確認コードを送る
        - パスワードのみの場合は、現行のメールアドレスに対して確認コードを送る
      requestBody:
        content:
          multipart/form-date:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: yamada@sample.hoge
                old_password:
                  type: string
                  format: password
                  example: query12345678
                new_password:
                  type: string
                  format: password
                  example: query12345678
      responses:
        '201':
          description: メールアドレスとパスワード仮登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "仮登録成功しました。"
                  data:
                    type: object
                    example: null
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '400':
            $ref: '#/components/responses/400Error'
        '409':
          description: |
            登録済みのメールアドレス
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  title: 
                    type: string
                    example: "メール・パスワード仮登録エラー"
                  message:
                    type: string
                    example: "登録済みのメールアドレスは登録できません。"
        '500':
          $ref: '#/components/responses/500Error'

  /email_and_password:
    post:
      security:
        - bearerAuth: []
      tags:
        - アカウント
      summary: メールアドレスとパスワードを本変更
      description: |
        - 仮変更されたメールアドレスとパスワードを本更新する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                temporaryId:
                  type: string
                  example: 8e8d0f82-89a1-4cc6-ba25-13c864ad09db
                confirmCode:
                  type: string
                  example: 7821
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "更新が完了しました。"
                  data:
                    type: object
                    example: null
        '401':
          description: |
            確認コードまたはトークンが無効
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 401
                  title: 
                    type: string
                    example: "メール・パスワード更新エラー"
                  message:
                    type: string
                    example: "確認コードまたは、トークンが無効です。"
        '400':
           $ref: '#/components/responses/400Error'
        '409':
          description: |
            登録済みのメールアドレス
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 409
                  title: 
                    type: string
                    example: "メール・パスワード更新エラー"
                  message:
                    type: string
                    example: "登録済みのメールアドレスは登録できません。"
        '500':
          $ref: '#/components/responses/500Error'

  /tokens:
    post:
      tags:
        - ユーザ登録・認証
      summary: サインイン
      description: |
        - メールアドレスとパスワードで認証する
        - トークンを生成し、返却
        - 保護されたエンドポイントのリクエストヘッダーにトークンを付与する必要がある
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: yamada@sample.com
                password:
                  type: string
                  format: password
                  example: qwerty123456789
              required:
                - email
                - password
      responses:
        '200':
          description: 認証が成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "サインイン成功しました。"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzEzMDcyNjYsImlhdCI6MTY3MTMwNTQ2NiwiaXNzIjoiZ2l0aHViLmNvbS9oYWNrLTMxL3BvaW50LWFwcC1iYWNrZW5kIiwianRpIjoiZGJkNzU3MzItNzFmZC00ZDQ4LWIyNmYtMTdlNTkwMjRlNDYxIiwicm9sZSI6InlhbWFkYUBzZmRhYXNtcGxlLmNvbSIsInN1YiI6ImFjY2Vzc190b2tlbiIsInVzZXJfbmFtZSI6MzQ0fQ.cE8BtV82WELa4mE7I0V92zriMTCPS9ztzaL-SZW0zJc3oLCameUI0OPa3pCjv-_YGUF3PyDmh5NuP0cKLZE2tT68fyvskhs_RgaaY-N6_tHFHzY9d8wiMyBO4fuGyp1tFX9BwUSvzLTDynhXDMN2DeaFGBapXoFgiI0dZE215dsPgtXCSOaz536hJShWOKTPgBEJ7uVRMATKJ--g0SUomj29P4bmHPYUIQyAoZSXZH-m3oOR-Et9F_MjuTy2BwZE6SNIO6oeAbdfzIW7f1qxSjM_5T64n_X_1O_gdRP0_ebcp4s7w2y4MX5c79gYKnAolwEMY5pVEqYFf-Eeig_G4Be6Tp_xm9zHcMi_aarQ7vbPebT6KXLZn5y5a0MraG0TnnOluZo-_Os5CEwFAfaOr2Y67NIZRcnnDvX9gLfAvaapyvBfcQ8DOXjimH-MOxjGGM0RYRZ9U9QLn3NgTZkrgmvbUlJJcRuCX48PaCtRiU_GdmOOTA3LA141_sk8Ce0YUiUqmWASD0DmuPJIfkGgHbqugXPgchHMl68U6oli22BuRTal3WHg4JQPgqKTeqt9bruVTecJ5XAIzdcvLEY_Nz62jc1VX4aY8Ty6dB1zlQbbriuN78DId0qwv5aqeHzv5StKChZOayRSchu_lSZVfq7s8N4DHJxg0SgvD0qoDd8
        '401':
          description: メールアドレス、または、パスワードが異なる
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 401
                  title:
                    type: string
                    example: "サインインエラー"
                  message:
                    type: string
                    example: "メールアドレスまたはパスワードが異なります。"
        '500':
          $ref: '#/components/responses/500Error'    

  /tokens/{accessToken}:
    delete:
      tags:
        - ユーザ登録・認証
      summary: サインアウト
      description: |
        - トークンを削除し、サインアウト処理を行う
      parameters:
        - in: path
          name: accessToken
          schema: 
            type: string
          description: |
            - トークンを削除し、ログアウト処理とする
          required: true
      responses:
        '200':
          description: サインアウトが成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: "サインアウトが成功しました。"
                  data:
                    type: object
                    example: null
        '404':
          description: 無効なトークン
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 404
                  title:
                    type: string
                    example: "サインアウト"
                  message:
                    type: string
                    example: "トークンが無効です。"
        '500':
          $ref: '#/components/responses/500Error'    

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: 認証トークン

  responses:
    400Error:
      description: |
        パラメーターエラー
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                example: "400"
              title:
                type: string
                example: "パラメータエラー"
              message: 
                type: string
                example: "name: cannot be blank."

    401UnauthorizedError:
      description: |
        認証失敗
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                example: "401"
              title: 
                type: string
                example: "認証エラー"
              message: 
                type: string
                example: "認証が失敗しました。再ログインしてください。"

    500Error:
      description: |
        サーバーエラー
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int64
                example: "500"
              title:
                type: string
                example: "サーバーエラー"
              message: 
                type: string
                example: "サーバー側で何らかのエラーが発生しました。時間をおいて再度アクセスしてください。"
